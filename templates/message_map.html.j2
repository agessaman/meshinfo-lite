{% extends "layout.html.j2" %}

{% block title %}Message Map | MeshInfo{% endblock %}
{% block head %}
  <script src="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.css" rel="stylesheet">
{% endblock %}

{% block content %}
<div class="container pt-3">
  <p>
    <a href="chat.html">Chat</a> &gt; Message Map
  </p>
  
  <div class="card mb-3">
    <div class="card-body">
      <h5 class="card-title">Message Details</h5>
      <p class="card-text">
        <strong>From:</strong> 
        {% set from_id = utils.convert_node_id_from_int_to_hex(message.from_id) %}
        {% if from_id in nodes and nodes[from_id].position and nodes[from_id].position.longitude_i is not none and nodes[from_id].position.latitude_i is not none %}
          <a href="node_{{ from_id }}.html">{{ nodes[from_id].long_name }} ({{ nodes[from_id].short_name }})</a>
        {% else %}
          Unknown
        {% endif %}
        <br>
        <strong>Time:</strong> {{ format_timestamp(message.ts_created) }}<br>
        <strong>Message:</strong> {{ message.text }}
      </p>
    </div>
  </div>

  <div id="map" style="height: 70vh; width: 100%;"></div>
  
  <div id="legend" class="p-2" style="background-color: #ffffff;">
    <div>LEGEND</div>
    <div>
      <div style="background-color: #FF6666; height: 4px; width: 25px; display: inline-flex;"></div> Direct Reception
    </div>
    <div>
      <div style="background-color: #6666FF; height: 4px; width: 25px; display: inline-flex;"></div> Via Repeater
    </div>
  </div>
</div>

<script type="module">
  const map = new ol.Map({
    layers: [
      new ol.layer.Tile({
        source: new ol.source.OSM(),
      }),
    ],
    target: 'map',
    view: new ol.View({
      center: ol.proj.fromLonLat([0, 0]),
      zoom: 2,
    }),
  });

  var senderStyle = new ol.style.Style({
    image: new ol.style.Circle({
      radius: 8,
      fill: new ol.style.Fill({
        color: '#FF4444'
      }),
      stroke: new ol.style.Stroke({
        color: 'white',
        width: 2
      })
    })
  });

  var receiverStyle = new ol.style.Style({
    image: new ol.style.Circle({
      radius: 6,
      fill: new ol.style.Fill({
        color: '#4444FF'
      }),
      stroke: new ol.style.Stroke({
        color: 'white',
        width: 2
      })
    })
  });

  // Add function to calculate distance between nodes
  function calculateDistance(lat1, lon1, lat2, lon2) {
    return Math.round(Math.sqrt(
      Math.pow(lat1 - lat2, 2) +
      Math.pow(lon1 - lon2, 2)
    ) * 111.32 * 100) / 100;  // Convert to km and round to 2 decimal places
  }

  const features = [];
  const lines = [];
  const labels = [];
  let senderFeature = null;

  // Add sender using sender_position
  {% set from_id_hex = utils.convert_node_id_from_int_to_hex(message.from_id) %}
  {% if sender_position and sender_position.longitude_i is not none and sender_position.latitude_i is not none %}
    senderFeature = new ol.Feature({
        geometry: new ol.geom.Point(ol.proj.fromLonLat([
            {{ sender_position.longitude_i / 10000000 }},
            {{ sender_position.latitude_i / 10000000 }}
        ])),
        node: {
            id: '{{ from_id_hex }}',
            {# Get names from the main nodes dict #}
            name: '{{ nodes[from_id_hex].short_name if from_id_hex in nodes else "???" }}',
            longName: '{{ nodes[from_id_hex].long_name if from_id_hex in nodes else "Unknown Sender" }}',
            type: 'sender',
            lat: {{ sender_position.latitude_i / 10000000 }},
            lon: {{ sender_position.longitude_i / 10000000 }},
            positionTime: {{ sender_position.position_time }}
        }
    });
    senderFeature.setStyle(senderStyle);
    features.push(senderFeature);
    
    // Add receivers and lines - only if sender position is known
    {% for receiver_id in message.receiver_ids %}
      var currentReceiverId = {{ receiver_id }}; // Store JS variable for clarity
      console.log("Processing Receiver ID:", currentReceiverId);

      {# Use receiver_positions dict for location #}
      {% set receiver_pos = receiver_positions.get(receiver_id) %}
      var receiverPosData = {{ receiver_pos | tojson if receiver_pos is defined else 'null' }};
      console.log(" -> Position data from backend:", receiverPosData);
      {% if receiver_pos and receiver_pos.longitude_i is not none and receiver_pos.latitude_i is not none %}
        console.log(" -> Position check PASSED for", currentReceiverId);
      try {
        var lon = {{ receiver_pos.longitude_i / 10000000 }};
        var lat = {{ receiver_pos.latitude_i / 10000000 }};
        console.log(`   Coords: lon=${lon}, lat=${lat}`);

        var pointGeom = new ol.geom.Point(ol.proj.fromLonLat([lon, lat]));
        console.log("   Created ol.geom.Point");

        {% set rid_hex = utils.convert_node_id_from_int_to_hex(receiver_id) %}
        {% set details = receiver_details.get(receiver_id) %}
        var nodeData = {
            id: '{{ rid_hex }}',
            name: '{{ nodes[rid_hex].short_name if rid_hex in nodes else "???" }}',
            longName: '{{ nodes[rid_hex].long_name if rid_hex in nodes else "Unknown Receiver" }}',
            snr: {{ details.rx_snr if details else 'null' }},
            hops: {% if details and details.hop_start is not none and details.hop_limit is not none %}{{ details.hop_start - details.hop_limit }}{% else %}0{% endif %},
            type: 'receiver',
            lat: lat, // Use JS var
            lon: lon, // Use JS var
            positionTime: {{ receiver_pos.position_time }}
        };
        console.log("   Created nodeData object:", nodeData);

        var receiver = new ol.Feature({
            geometry: pointGeom,
            node: nodeData
        });
        console.log("   Created ol.Feature");

        receiver.setStyle(receiverStyle);
        console.log("   Set receiver style");

        features.push(receiver);
        console.log("   Pushed receiver feature to array. Current features count:", features.length);

        // Line and Label creation (can add logs here too if needed)
        var senderCoords = senderFeature.getGeometry().getCoordinates(); // Get projected coords
        // Transform sender's projected coords back to LonLat for fromCoord
        var fromCoordLonLat = ol.proj.transform(senderCoords, 'EPSG:3857', 'EPSG:4326');
        var fromCoord = fromCoordLonLat; // Use LonLat for distance calculation

        var toCoord = [lon, lat];
        var distance = calculateDistance(fromCoord[1], fromCoord[0], toCoord[1], toCoord[0]);
        var hops = nodeData.hops; // Use hops from nodeData

        var points = [fromCoord, toCoord];
        for (var i = 0; i < points.length; i++) { points[i] = ol.proj.transform(points[i], 'EPSG:4326', 'EPSG:3857'); }
        var line = new ol.Feature({ geometry: new ol.geom.LineString(points) });

        var lineStyle = new ol.style.Style({
          stroke: new ol.style.Stroke({
            color: {% if details and details.hop_start is not none and details.hop_limit is not none and (details.hop_start - details.hop_limit) > 0 %}'#6666FF'{% else %}'#FF6666'{% endif %}, // <-- Added comma here
            width: 2
          })
        });

        line.setStyle(lineStyle);
        lines.push(line);
        console.log("   Pushed line feature to array.");


        // Add label at the middle of the line
        var midPoint = [
          (points[0][0] + points[1][0]) / 2,
          (points[0][1] + points[1][1]) / 2
        ];
        
        var label = new ol.Feature({
          geometry: new ol.geom.Point(midPoint)
        });
        
        var labelText = distance + ' km';
        if (hops > 0) {
          labelText += '\n' + hops + ' hop' + (hops > 1 ? 's' : '');
        }
        
        label.setStyle(new ol.style.Style({
            text: new ol.style.Text({
                text: labelText,
                font: '12px Arial',
                fill: new ol.style.Fill({ color: '#000000' }),
                stroke: new ol.style.Stroke({
                color: '#ffffff',
                width: 3
                }),
                padding: [3, 5, 3, 5],  // More balanced padding
                backgroundFill: new ol.style.Fill({
                color: 'rgba(255, 255, 255, 0.85)'
                }),
                backgroundStroke: new ol.style.Stroke({
                color: 'rgba(0, 0, 0, 0.4)',
                width: 1,
                lineCap: 'round',
                lineJoin: 'round'
                })
            })
            }));
        
        labels.push(label);
        console.log("   Pushed label feature to array.");

      } catch (e) {
        console.error("   ERROR processing receiver", currentReceiverId, ":", e);
      }
      {% else %}
        // This block is entered - position is missing or invalid
        console.warn(" -> Position check FAILED for", currentReceiverId);
        if (!receiverPosData) {
            console.warn("    Reason: No position data found in receiver_positions dict.");
        } else if (receiverPosData.longitude_i === null || receiverPosData.longitude_i === undefined ) {
            console.warn("    Reason: longitude_i is null or undefined.");
        } else if (receiverPosData.latitude_i === null || receiverPosData.latitude_i === undefined) {
            console.warn("    Reason: latitude_i is null or undefined.");
        } else {
            console.warn("    Reason: Unknown (check receiverPosData object).");
        }
      {% endif %}
    {% endfor %}
  {% endif %}

  console.log("Finished processing features. Total points:", features.length, "Total lines:", lines.length, "Total labels:", labels.length);

  // Combine features
  const allFeatures = features.concat(lines).concat(labels);
  console.log("Combined all features. Total count:", allFeatures.length);

  // Create empty source first
  const vectorSource = new ol.source.Vector();
  console.log("Created empty vector source.");

  // Add features explicitly AFTER loops finish
  if (allFeatures.length > 0) {
    vectorSource.addFeatures(allFeatures);
    console.log(`Added ${allFeatures.length} features to vector source. Source now has ${vectorSource.getFeatures().length} features.`);
  } else {
    console.warn("No features were created to add to the source.");
  }

  // Create layer with the source
  const vectorLayer = new ol.layer.Vector({
    source: vectorSource,
    // Declutter labels slightly
    declutter: true
  });
  console.log("Created vector layer.");

  map.addLayer(vectorLayer);
  console.log("Added vector layer to map.");

  // --- Debugging Map View ---
  var view = map.getView();
  console.log("Initial/Current Map View State:", JSON.stringify(view.getProperties()));

  if (features.length > 0) {
    console.log("Attempting to fit map view based on point features...");
    const pointSourceForExtent = new ol.source.Vector({ features: features });
    var extent = pointSourceForExtent.getExtent();
    console.log("Calculated extent from points:", extent);

    if (!ol.extent.isEmpty(extent) && isFinite(extent[0]) && isFinite(extent[1]) && isFinite(extent[2]) && isFinite(extent[3]) && extent[0] <= extent[2] && extent[1] <= extent[3])
    {
        console.log("Extent is valid. Fitting view...");
        console.log("View state BEFORE fit:", JSON.stringify(view.getProperties()));
        view.fit(extent, {
            padding: [100, 100, 100, 100],
            minResolution: view.getResolutionForZoom(19), // Use maxZoom resolution
            maxZoom: 19,
            duration: 500
        });
        console.log("Fit view called.");
        // Log state immediately after fit call (may not reflect final state yet)
        console.log("View state immediately AFTER fit call:", JSON.stringify(view.getProperties()));

        // Log state after fit animation duration
        setTimeout(() => {
            console.log("View state AFTER fit timeout:", JSON.stringify(view.getProperties()));
        }, 600); // Wait slightly longer than duration
    } else {
        console.warn("Calculated extent is invalid or empty. Cannot fit view. Extent:", extent);
    }
  } else {
      console.log("No point features found to fit view.");
  }

  // --- Add Render Complete Listener ---
  map.once('rendercomplete', function() {
    console.log("--- Map Render Complete ---");
    try {
      const mapLayers = map.getLayers().getArray();
      console.log(`Map has ${mapLayers.length} layers.`);
      if (mapLayers.length > 1) {
        const potentialVectorLayer = mapLayers[1];
        if (potentialVectorLayer instanceof ol.layer.Vector) {
          const source = potentialVectorLayer.getSource();
          const layerFeatures = source.getFeatures();
          console.log(`Vector layer found. Contains ${layerFeatures.length} features.`);
          if (layerFeatures.length > 0) {
            console.log("First feature geom in layer:", layerFeatures[0].getGeometry().getCoordinates());
          }
        } else {
          console.warn("Second layer is not a Vector layer:", potentialVectorLayer);
        }
      } else {
          console.warn("Vector layer not found or only base layer exists.");
      }
      console.log("Final Map View State:", JSON.stringify(map.getView().getProperties()));
    } catch(e) {
      console.error("Error during rendercomplete check:", e);
    }
    console.log("--- End Render Complete ---");
  });
  
  // Add popup for node info
  var container = document.createElement('div');
  container.className = 'ol-popup';
  var content = document.createElement('div');
  container.appendChild(content);
  
  var overlay = new ol.Overlay({
    element: container,
    autoPan: true,
    autoPanAnimation: {
      duration: 250
    }
  });
  map.addOverlay(overlay);
  
  map.on('click', function(evt) {
    var feature = map.forEachFeatureAtPixel(evt.pixel, function(feature) {
        return feature;
    });
    
    if (feature && feature.get('node')) {
        var node = feature.get('node');
        var coordinates = feature.getGeometry().getCoordinates();
        
        var html = '<div class="p-2">';
        
        // Add node name and link with full name
        html += `<h6><a href="node_${node.id}.html">${node.longName} (${node.name})</a></h6>`;
        
        // Add node type and metrics
        if (node.type === 'sender') {
        html += '<span class="badge bg-danger">Sender</span><br>';
        } else {
        html += '<span class="badge bg-primary">Receiver</span><br>';
        
        // Add reception metrics for receivers
        if (node.snr !== undefined) {
            html += `<strong>SNR:</strong> ${node.snr} dB<br>`;
        }
        if (node.hops !== undefined) {
            html += `<strong>Hops:</strong> ${node.hops}<br>`;
        }
        
        // Calculate distance using stored coordinates
        if (node.type === 'receiver') {
            var senderFeature = features[0];
            if (senderFeature) {
            var senderNode = senderFeature.get('node');
            var distance = calculateDistance(
                senderNode.lat, senderNode.lon,
                node.lat, node.lon
            );
            html += `<strong>Distance from Sender:</strong> ${distance} km<br>`;
            }
        }
        }
        
        html += '</div>';
        
        content.innerHTML = html;
        overlay.setPosition(coordinates);
    } else {
        overlay.setPosition(undefined);
    }
    });
</script>

<style>
    #map {
    height: 70vh;
    width: 100%;
    }
    #legend {
    position: absolute;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    }
    .ol-popup {
    position: absolute;
    background-color: white;
    box-shadow: 0 1px 4px rgba(0,0,0,0.2);
    padding: 0;  // Removed padding as it's now in the content div
    border-radius: 10px;
    border: 1px solid #cccccc;
    bottom: 12px;
    left: -50px;
    min-width: 200px;
    max-width: 300px;
    }

    // Add badge styling if not already present
    .badge {
    display: inline-block;
    padding: 0.25em 0.4em;
    font-size: 75%;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    border-radius: 0.25rem;
    margin-bottom: 0.5rem;
    }
    .bg-danger {
    background-color: #dc3545;
    color: white;
    }
    .bg-primary {
    background-color: #0d6efd;
    color: white;
    }
</style>
{% endblock %}